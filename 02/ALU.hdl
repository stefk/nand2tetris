/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:

    And16(a=x, b[0..15]=false, out=zeroX);
    Not16(in=x, out=notX);
    Or16(a=x, b[0..15]=true, out=zeroNotX);
    Mux4Way16(a=x, b=zeroX, c=notX, d=zeroNotX, sel[0]=zx, sel[1]=nx, out=xPreSett);

    And16(a=y, b[0..15]=false, out=zeroY);
    Not16(in=y, out=notY);
    Or16(a=y, b[0..15]=true, out=zeroNotY);
    Mux4Way16(a=y, b=zeroY, c=notY, d=zeroNotY, sel[0]=zy, sel[1]=ny, out=yPreSett);

    Add16(a=xPreSett, b=yPreSett, out=xPlusY);
    And16(a=xPreSett, b=yPreSett, out=xAndY);
    Mux16(a=xAndY, b=xPlusY, sel=f, out=product);

    Not16(in=product, out=notProduct);
    Mux16(a=product, b=notProduct, sel=no, out=result);

    Or16(a=result, b[0..15]=false, out=out);
    Or16(a=result, b[0..15]=false, out[0..7]=halfProduct1, out[8..15]=halfProduct2);
    Or8Way(in=halfProduct1, out=halfZero1);
    Or8Way(in=halfProduct2, out=halfZero2);
    Or(a=halfZero1, b=halfZero2, out=notZero);
    Not(in=notZero, out=zr);

    Or16(a=result, b[0..15]=false, out[15]=msb);
    And(a=msb, b=true, out=ng);
}
